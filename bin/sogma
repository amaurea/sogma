#!/usr/bin/env python
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("obsinfo")
parser.add_argument("area")
parser.add_argument("odir")
parser.add_argument("-Q", "--query",   type=str, default=None)
parser.add_argument(      "--wafers",  type=str, default=None)
parser.add_argument(      "--bands",   type=str, default=None)
parser.add_argument("-p", "--prefix",  type=str, default=None)
parser.add_argument("-v", "--verbose", action="count", default=1)
parser.add_argument("-q", "--quiet",   action="count", default=0)
parser.add_argument(      "--tods",    type=str, default=None)
parser.add_argument("-L", "--loader",  type=str, default="auto")
parser.add_argument("-D", "--device",  type=str, default="auto")
parser.add_argument("-I", "--maxiter", type=int, default=500)
parser.add_argument("-@", "--center-at",type=str, default=None)
parser.add_argument("-m", "--mode",    type=str, default="full")
parser.add_argument("-a", "--autocrop",   action="store_true")
args = parser.parse_args()

# Should some of this be factored out into an
# SO-specific mapmaker class?

import numpy as np, os, time, sys
from pixell import enmap, utils, mpi, colors
import cupy
from sogma import logging, mapmaking, loading, tiling, nmat, device, gutils

if   args.mode in ["individual","depth1"]: separate = True
elif args.mode in ["full"]:                separate = False
else: raise ValueError("Unknown mode '%s'" % (str(args.mode)))
comm_all   = mpi.COMM_WORLD
comm_per   = mpi.COMM_SELF if separate else mpi.COMM_WORLD
dtype_tod  = np.float32
dtype_map  = np.float32
shape, wcs = enmap.read_map_geometry(args.area)
# Set up our device
dev = device.get_device(args.device)
#L = logging.Logger(id=comm.rank, level=args.verbose-args.quiet).setdefault()
L = logging.Logger(dev, id=comm_all.rank, level=args.verbose-args.quiet, fmt="{id:3d} {t:10.6f} {mem:10.6f} {dmem_pools:10.6f} {dmem_rest:10.6f} {dmem_unknown:10.6f} {msg:s}").setdefault()
L.print("Init", level=0, id=0, color=colors.lgreen)
# Set up our memory pools. This shouldn't be necessary if I make
# the interface a bit nicer
dev.pools.want("tod", "ft", "pointing", "plan", "nmat_work", "cut")
# Disable the cufft cache. It uses too much gpu memory
# TODO: This must be moved to device somehow
cupy.fft.config.get_plan_cache().set_memsize(0)
# Set up our data loader
loader  = loading.Loader(args.obsinfo, type=args.loader, dev=dev)
obsinfo = loader.query(args.query, wafers=args.wafers, bands=args.bands)
if args.tods: obsinfo = eval("obsinfo["+args.tods+"]").reshape(-1).view(np.recarray)
nfile   = len(obsinfo)
L.print("Mapping %d tods with %d mpi tasks" % (nfile, comm_all.size), level=0, id=0, color=colors.lgreen)
prefix = args.odir + "/"
if args.prefix: prefix += args.prefix + "_"
utils.mkdir(args.odir)
# Set up the signals we will solve for
recenter = gutils.parse_recentering(args.center_at) if args.center_at else None
signal_map = mapmaking.SignalMap(shape, wcs, comm_per, dev=dev, dtype=np.float32, recenter=recenter, autocrop=args.autocrop)
signal_cut = mapmaking.SignalCutPoly(comm_per, dev=dev)
# Set up the mapmaker
#mapmaker = mapmaking.MLMapmaker(signals=[signal_cut,signal_map], dtype=dtype_tod, verbose=True, noise_model=nmat.NmatDetvecs(dev=dev), dev=dev)
#mapmaker = mapmaking.MLMapmaker(signals=[signal_cut,signal_map], dtype=dtype_tod, verbose=True, noise_model=nmat.NmatUncorr(dev=dev), dev=dev)
mapmaker = mapmaking.MLMapmaker(signals=[signal_cut,signal_map], dtype=dtype_tod, verbose=True, noise_model=nmat.NmatDebug(dev=dev), dev=dev)

if   args.mode == "full":
	mapmaking.make_map(mapmaker, loader, obsinfo, comm_all, prefix=prefix, dump=10, maxiter=args.maxiter)
elif args.mode == "individual":
	mapmaking.make_maps_perobs(mapmaker, loader, obsinfo, comm_all, comm_per, prefix=prefix, dump=10, maxiter=args.maxiter)
elif args.mode == "depth1":
	mapmaking.make_maps_depth1(mapmaker, loader, obsinfo, comm_all, comm_per, prefix=prefix, dump=10, maxiter=args.maxiter)
else: raise ValueError("Unknown mode '%s'" % str(args.mode))
